post = L R N
in   = L N R
Here, last index is our node so we get its index in inorder and element after that will come to right side. and will post - 1 as their root.
and element before that will come to left with index pst - 1 - (j - ind). ? how this come -> pst - (number of element on right side). 

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
TreeNode* Solution::buildTree(vector<int> &A, vector<int> &B) {
    int n= A.size();
    unordered_map<int,int> M;
    for(int i= 0; i < n; i++)   M[A[i]] = i;
    
    
    function<TreeNode*(int,int,int)> solve = [&](int pst, int i, int j){
        if(pst < 0 || i > j) return (TreeNode*)(NULL);
        TreeNode* root = new TreeNode(B[pst]);
        
        int ind = M[B[pst]];
        
        root->left = solve(pst - (j - ind) - 1, i , ind-1);
        root->right = solve(pst -1 , ind+1, j);
        return root;  
    };
    
    
    return solve(n-1,0, n-1); 
}
